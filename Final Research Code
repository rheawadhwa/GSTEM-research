{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "42"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "df = pd.read_csv('kddcup99_csv.csv')\n",
    "len(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=df.iloc[::30, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "back                 74\n",
       "buffer_overflow       1\n",
       "guess_passwd          2\n",
       "imap                  1\n",
       "ipsweep              43\n",
       "land                  1\n",
       "multihop              1\n",
       "neptune            3573\n",
       "nmap                  9\n",
       "normal             3239\n",
       "pod                   8\n",
       "portsweep            35\n",
       "rootkit               1\n",
       "satan                53\n",
       "smurf              9358\n",
       "teardrop             34\n",
       "warezclient          34\n",
       "warezmaster           1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('label').size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/envs/new_env/lib/python3.7/site-packages/pandas/core/indexing.py:1676: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_column(ilocs[0], value, pi)\n",
      "/opt/conda/envs/new_env/lib/python3.7/site-packages/pandas/core/frame.py:4315: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  errors=errors,\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration</th>\n",
       "      <th>src_bytes</th>\n",
       "      <th>dst_bytes</th>\n",
       "      <th>land</th>\n",
       "      <th>wrong_fragment</th>\n",
       "      <th>urgent</th>\n",
       "      <th>hot</th>\n",
       "      <th>num_failed_logins</th>\n",
       "      <th>logged_in</th>\n",
       "      <th>lnum_compromised</th>\n",
       "      <th>...</th>\n",
       "      <th>dst_host_srv_count</th>\n",
       "      <th>dst_host_same_srv_rate</th>\n",
       "      <th>dst_host_diff_srv_rate</th>\n",
       "      <th>dst_host_same_src_port_rate</th>\n",
       "      <th>dst_host_srv_diff_host_rate</th>\n",
       "      <th>dst_host_serror_rate</th>\n",
       "      <th>dst_host_srv_serror_rate</th>\n",
       "      <th>dst_host_rerror_rate</th>\n",
       "      <th>dst_host_srv_rerror_rate</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>181</td>\n",
       "      <td>5450</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0</td>\n",
       "      <td>215</td>\n",
       "      <td>3670</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0</td>\n",
       "      <td>232</td>\n",
       "      <td>8766</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>0</td>\n",
       "      <td>219</td>\n",
       "      <td>2000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120</th>\n",
       "      <td>0</td>\n",
       "      <td>267</td>\n",
       "      <td>9317</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493890</th>\n",
       "      <td>0</td>\n",
       "      <td>237</td>\n",
       "      <td>16623</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493920</th>\n",
       "      <td>0</td>\n",
       "      <td>273</td>\n",
       "      <td>18347</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493950</th>\n",
       "      <td>0</td>\n",
       "      <td>308</td>\n",
       "      <td>11121</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493980</th>\n",
       "      <td>0</td>\n",
       "      <td>326</td>\n",
       "      <td>4660</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.04</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>494010</th>\n",
       "      <td>0</td>\n",
       "      <td>308</td>\n",
       "      <td>662</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>255</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6812 rows × 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        duration  src_bytes  dst_bytes  land  wrong_fragment  urgent  hot  \\\n",
       "0              0        181       5450     0               0       0    0   \n",
       "30             0        215       3670     0               0       0    0   \n",
       "60             0        232       8766     0               0       0    0   \n",
       "90             0        219       2000     0               0       0    0   \n",
       "120            0        267       9317     0               0       0    0   \n",
       "...          ...        ...        ...   ...             ...     ...  ...   \n",
       "493890         0        237      16623     0               0       0    0   \n",
       "493920         0        273      18347     0               0       0    0   \n",
       "493950         0        308      11121     0               0       0    0   \n",
       "493980         0        326       4660     0               0       0    0   \n",
       "494010         0        308        662     0               0       0    0   \n",
       "\n",
       "        num_failed_logins  logged_in  lnum_compromised  ...  \\\n",
       "0                       0          1                 0  ...   \n",
       "30                      0          1                 0  ...   \n",
       "60                      0          1                 0  ...   \n",
       "90                      0          1                 0  ...   \n",
       "120                     0          1                 0  ...   \n",
       "...                   ...        ...               ...  ...   \n",
       "493890                  0          1                 0  ...   \n",
       "493920                  0          1                 0  ...   \n",
       "493950                  0          1                 0  ...   \n",
       "493980                  0          1                 0  ...   \n",
       "494010                  0          1                 0  ...   \n",
       "\n",
       "        dst_host_srv_count  dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
       "0                        9                     1.0                     0.0   \n",
       "30                     255                     1.0                     0.0   \n",
       "60                     255                     1.0                     0.0   \n",
       "90                     255                     1.0                     0.0   \n",
       "120                    255                     1.0                     0.0   \n",
       "...                    ...                     ...                     ...   \n",
       "493890                 255                     1.0                     0.0   \n",
       "493920                 255                     1.0                     0.0   \n",
       "493950                 255                     1.0                     0.0   \n",
       "493980                 255                     1.0                     0.0   \n",
       "494010                 255                     1.0                     0.0   \n",
       "\n",
       "        dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
       "0                              0.11                         0.00   \n",
       "30                             0.03                         0.05   \n",
       "60                             0.03                         0.04   \n",
       "90                             0.00                         0.00   \n",
       "120                            0.02                         0.05   \n",
       "...                             ...                          ...   \n",
       "493890                         0.33                         0.03   \n",
       "493920                         0.50                         0.03   \n",
       "493950                         0.08                         0.05   \n",
       "493980                         0.04                         0.10   \n",
       "494010                         0.03                         0.06   \n",
       "\n",
       "        dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
       "0                        0.0                      0.00                   0.0   \n",
       "30                       0.0                      0.00                   0.0   \n",
       "60                       0.0                      0.00                   0.0   \n",
       "90                       0.0                      0.00                   0.0   \n",
       "120                      0.0                      0.00                   0.0   \n",
       "...                      ...                       ...                   ...   \n",
       "493890                   0.0                      0.00                   0.0   \n",
       "493920                   0.0                      0.00                   0.0   \n",
       "493950                   0.0                      0.00                   0.0   \n",
       "493980                   0.0                      0.00                   0.0   \n",
       "494010                   0.0                      0.01                   0.0   \n",
       "\n",
       "        dst_host_srv_rerror_rate  label  \n",
       "0                            0.0      0  \n",
       "30                           0.0      0  \n",
       "60                           0.0      0  \n",
       "90                           0.0      0  \n",
       "120                          0.0      0  \n",
       "...                          ...    ...  \n",
       "493890                       0.0      0  \n",
       "493920                       0.0      0  \n",
       "493950                       0.0      0  \n",
       "493980                       0.0      0  \n",
       "494010                       0.0      0  \n",
       "\n",
       "[6812 rows x 39 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#selected_df = df[(df['label']=='normal')|(df['label']=='neptune')|(df['label']=='smurf')]\n",
    "#remap_label = {'normal':'0', 'neptune':'1', 'smurf':'1'}\n",
    "selected_df = df[(df['label']=='normal')|(df['label']=='neptune')]\n",
    "remap_label = {'normal':0, 'neptune':1}\n",
    "selected_df.loc[:, 'label']=selected_df.replace({\"label\": remap_label})['label']\n",
    "selected_df.drop(columns=['protocol_type', 'service','flag'],inplace=True)\n",
    "#remap_ptype = {'icmp':'0', 'udp':'1', 'tcp':'2'}\n",
    "#selected_df.loc[:, 'protocol_type']=selected_df.replace({\"protocol_type\": remap_ptype})['protocol_type']\n",
    "#selected_df.loc[:, 'service']=selected_df['service'].astype('category').cat.codes\n",
    "#selected_df.loc[:, 'flag']=selected_df['flag'].astype('category').cat.codes\n",
    "selected_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "0    3239\n",
       "1    3573\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "selected_df.groupby('label').size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "493410    0\n",
       "491760    0\n",
       "34110     0\n",
       "390900    1\n",
       "15690     0\n",
       "         ..\n",
       "380640    1\n",
       "124920    1\n",
       "63870     1\n",
       "105210    0\n",
       "108960    1\n",
       "Name: label, Length: 681, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(selected_df.drop(columns=['label']), selected_df.label,test_size=0.9,random_state=0)\n",
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9967378894144512"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg = LogisticRegression(solver='liblinear')\n",
    "logreg.fit(X_train,y_train)\n",
    "logreg.score(X_test,y_test)\n",
    "#logreg.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data_X = train_arr[:, :(len(train_arr)-1)]\n",
    "#data_y = train_arr[:, (len(train_arr)-2):(len(train_arr)-1)]\n",
    "#clf = LogisticRegression().fit(data_X, data_y)\n",
    "#clf.score(data_X, data_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.16702324, -0.01807566,  0.15818056,  0.0701225 ,  0.01735837,\n",
       "       -0.12304946])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.coef_[abs(logreg.coef_)>0.01]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['src_bytes', 'dst_bytes', 'count', 'srv_count', 'dst_host_count',\n",
       "       'dst_host_srv_count'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "important = np.nonzero(abs(logreg.coef_) > 0.01)\n",
    "X_train.columns[important[1]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dst_host_count</th>\n",
       "      <th>dst_host_srv_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>493410</th>\n",
       "      <td>19</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>491760</th>\n",
       "      <td>66</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34110</th>\n",
       "      <td>255</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390900</th>\n",
       "      <td>255</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15690</th>\n",
       "      <td>24</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380640</th>\n",
       "      <td>255</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>124920</th>\n",
       "      <td>255</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63870</th>\n",
       "      <td>255</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105210</th>\n",
       "      <td>255</td>\n",
       "      <td>255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108960</th>\n",
       "      <td>255</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>681 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        dst_host_count  dst_host_srv_count\n",
       "493410              19                 255\n",
       "491760              66                  61\n",
       "34110              255                 255\n",
       "390900             255                  22\n",
       "15690               24                 230\n",
       "...                ...                 ...\n",
       "380640             255                  12\n",
       "124920             255                  10\n",
       "63870              255                   9\n",
       "105210             255                 255\n",
       "108960             255                  10\n",
       "\n",
       "[681 rows x 2 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train with 2 input features instead of the original 38\n",
    "X_train2,X_test2,y_train2,y_test2=train_test_split(pd.concat([selected_df['dst_host_count'], selected_df['dst_host_srv_count']], axis=1), selected_df.label,test_size=0.9,random_state=0)\n",
    "X_train2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.960528461914859"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg2 = LogisticRegression(solver='liblinear')\n",
    "logreg2.fit(X_train2,y_train2)\n",
    "logreg2.score(X_test2,y_test2)\n",
    "#logreg2.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_train2[y_train==0].dst_host_count, X_train2[y_train==0].dst_host_srv_count, s=10, label='normal')\n",
    "plt.scatter(X_train2[y_train==1].dst_host_count, X_train2[y_train==1].dst_host_srv_count, s=10, label='abnormal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7f0d5b005b90>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.scatter(X_test2[y_test2==0].dst_host_count, X_test2[y_test2==0].dst_host_srv_count, s=0.5, label='normal')\n",
    "plt.scatter(X_test2[y_test2==1].dst_host_count, X_test2[y_test2==1].dst_host_srv_count, s=0.5, label='abnormal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 6.52761785e-04, -1.67023240e-01, -1.80756612e-02,\n",
       "         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        -2.86493044e-05,  0.00000000e+00, -4.01123875e-05,\n",
       "         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        -1.25848362e-05,  0.00000000e+00,  0.00000000e+00,\n",
       "         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        -5.80092239e-06,  1.58180556e-01,  7.01225004e-02,\n",
       "         7.02250525e-03,  7.02250525e-03, -2.73636663e-03,\n",
       "        -2.73631164e-03, -3.48780314e-03,  9.92564752e-04,\n",
       "        -3.87846958e-03,  1.73583669e-02, -1.23049456e-01,\n",
       "        -8.51345778e-05,  7.74450083e-05, -1.36780862e-03,\n",
       "        -4.35733791e-04,  6.64527433e-03,  7.02160001e-03,\n",
       "        -2.73737904e-03, -2.73374846e-03]])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = logreg2.intercept_[0]\n",
    "w1, w2 = logreg2.coef_.T\n",
    "x = np.linspace(0,255,100)\n",
    "y = (-w1/w2)*x+ (-b/w2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_test2[y_test2==0].dst_host_count, X_test2[y_test2==0].dst_host_srv_count, s=0.5, label='normal')\n",
    "plt.scatter(X_test2[y_test2==1].dst_host_count, X_test2[y_test2==1].dst_host_srv_count, s=0.5, label='abnormal')\n",
    "plt.plot(x, y, '-r', label='boundary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3215"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y_test2[y_test2==1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2916"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y_test2[y_test2==0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dst_host_count\n",
       "83        1\n",
       "86        1\n",
       "136       1\n",
       "177       1\n",
       "233       1\n",
       "255    3210\n",
       "dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test2[y_test2==1].groupby('dst_host_count').size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "X has 2 features per sample; expecting 38",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-44-61c648938553>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_test2_predict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlogreg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my_test2_actual\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_test2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#false negatives are abnormal datapoints incorrectly predicted as normal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mfalse_negative\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_test2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlogical_and\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test2_predict\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test2_actual\u001b[0m\u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mfalse_negative\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/envs/new_env/lib/python3.7/site-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    307\u001b[0m             \u001b[0mPredicted\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0mper\u001b[0m \u001b[0msample\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m         \"\"\"\n\u001b[0;32m--> 309\u001b[0;31m         \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    310\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    311\u001b[0m             \u001b[0mindices\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mscores\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/envs/new_env/lib/python3.7/site-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mdecision_function\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mn_features\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    288\u001b[0m             raise ValueError(\"X has %d features per sample; expecting %d\"\n\u001b[0;32m--> 289\u001b[0;31m                              % (X.shape[1], n_features))\n\u001b[0m\u001b[1;32m    290\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    291\u001b[0m         scores = safe_sparse_dot(X, self.coef_.T,\n",
      "\u001b[0;31mValueError\u001b[0m: X has 2 features per sample; expecting 38"
     ]
    }
   ],
   "source": [
    "y_test2_predict = logreg.predict(X_test2)\n",
    "y_test2_actual = y_test2.to_numpy()\n",
    "#false negatives are abnormal datapoints incorrectly predicted as normal\n",
    "false_negative = X_test2[np.logical_and(y_test2_predict == 0, y_test2_actual== 1)]\n",
    "false_negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#false positive are normal datapoints incorrectly predicted as abnormal\n",
    "false_positive = X_test2[np.logical_and(y_test2_predict == 1, y_test2_actual == 0)]\n",
    "false_positive"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.axis([0, 260, 0, 260])\n",
    "plt.scatter(false_negative.dst_host_count, false_negative.dst_host_srv_count, s=5, label='false_negative')\n",
    "plt.scatter(false_positive.dst_host_count, false_positive.dst_host_srv_count, s=0.1, label='false_positive')\n",
    "plt.plot(x, y, '-r', label='boundary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:new_env]",
   "language": "python",
   "name": "conda-env-new_env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
